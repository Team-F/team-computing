
/*----------------------------------------------------------------------------------------------------------
Program Description: Function for RobotC
Authors: Seamus de Cleir and Dylan Crosbie
Date: 11/02/15
---------------------------------------------------------------------------------------------------------*/
//lineTrack Function
void lineTrack(int threshold){ //Tracks the black line by moving over and back until it is detected
while (SensorValue(lightSensor) <= threshold)
{
motor[rightMotor] = 30-(SensorValue(soundSensor)/10);
motor[leftMotor] = 0;

}//End of While
while (SensorValue(lightSensor) >= threshold)
{
motor[rightMotor] = 0;
motor[leftMotor] = 30-(SensorValue(soundSensor)/10);
}//End of while
}//End of lineTrack

//motorControl Function
void motorControl(int left, int right, int t){
motor[leftMotor] = left; //Sets both motors to variable speed with a wait time of variable t
motor[rightMotor] = right;
wait1Msec(t);
}//End of motorControl

//rightTurn Function
void leftTurn(){
nMotorEncoder[leftMotor] = 0; //Sets the distance calculator to zero
while (nMotorEncoder[leftMotor] > -250){ //This while loop continues until the motor A has gone a -300 revolution
motor[leftMotor] = -50; //Moves motor A at -50%, turning the robot
}//End of while
}//End of rightTurn

//leftTurn Function
void rightTurn(){

nMotorEncoder[rightMotor] = 0; //Sets the distance calculator to zero

while (nMotorEncoder[rightMotor] > -250){ //This while loop continues until the motor A has gone a -300 revolution

motor[rightMotor] = -50; //Moves motor A at -50%, turning the robot

}//End of while
}//End of leftTurn

//moveDistance
void moveDistance(int dis, int spd){
nMotorEncoder[motorA] = 0; //Resets both motors distance calculators
nMotorEncoder[motorC] = 0;
nMotorEncoderTarget[motorA] = dis; //Sets the target of two turns for both motors
nMotorEncoderTarget[motorC] = dis;
motor[leftMotor] = spd; //Sets the power to a random number for both motors
motor[rightMotor] = spd;
while (nMotorRunState[motorC] != runStateIdle) //Moves the robot forward the target amount specified
{}//End of while
}//End of moveDistance

//lineTrackSpeed Function
void lineTrackspeed(int threshold, int speed){ //Tracks the black line by moving over and back until it is detected
while (SensorValue(lightSensor) <= threshold)
{
motor[rightMotor] = speed;
motor[leftMotor] = 0;

}//End of While
while (SensorValue(lightSensor) >= threshold)
{
motor[rightMotor] = 0;
motor[leftMotor] = speed;
}//End of while
}//End of lineTrack

int followLine(int distance, int speed)
{
		nMotorEncoder[rightMotor] = 0; //Resets both motors distance calculators
		nMotorEncoder[leftMotor] = 0;
		
		distance = distance * 36;
		
		
		while (nMotorEncoder[rightMotor] < distance && nMotorEncoder[leftMotor] < distance)
			{
				if(SensorValue(sonarSensor) < 10)
				{
					motor[leftMotor]=0;
					motor[rightMotor]=0;
			
					return 1;
				}
				else
				{
					lineTrackSpeed(50, speed);
				}
				
			}	
			motor[leftMotor]=0;
			motor[rightMotor]=0;
			
			return 0;
}

int MoveRobot (int wheelRatio, int distance) 
{
	distance = distance * 36;

	nSyncedMotors = synchBC; //Syncs the Motors A and C. A is the master and C is the slave.
	nSyncedTurnRatio = wheelRatio; //Sets the slave C to copy the master A at 100%
	nMotorEncoder[rightMotor] = 0;
	
	while (nMotorEncoder[rightMotor] < distance)
	{
		if(SensorValue(touchSensor)== 1)
		{
			return 1;
		}
		else
		{	
			motor[rightMotor] = SensorValue(soundSensor);
			
			nxtDisplayCenteredBigTextLine(3, "%d" ,SensorValue(soundSensor) );
		}
	}
	return 0;
}



int findTreshold(int dark, int light) //Calculates the light threshold
{
	int t = 0;

	t = (dark + light) / 2;

	return t;

}//End of lightThreshold

void followLines(int lines)
{
	int countValue = 0;
	int lastSeen;

	nxtDisplayCenteredBigTextLine(3, "%d" ,countValue );
	ClearTimer(T1);
	lastSeen= 1;

	while(lines!=countValue)
		{
			motor[leftMotor]=50;
			motor[rightMotor]=50;
			if(SensorValue(lightSensor) < 50)
				{
					
					if (lastSeen == 1)
						{
							PlayTone(695, 14);
							countValue=countValue+ 1;
							lastSeen= 0;
							nxtDisplayCenteredBigTextLine(3, "%d" ,countValue );
							}
							}
					else
						{
							lastSeen= 1;
						}
			}
		
}
		
		
	
