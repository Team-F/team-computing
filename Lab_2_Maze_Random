/*----------------------------------------------------------------------------------------------------------
Program Description:	Moves the Robot from point 1 to point 2 or point 3 randomly using PID and synced 
						motors (Question 9, Lab 2)
Authors:				Seamus de Cleir and Dylan Crosbie
Date:					28/01/15
---------------------------------------------------------------------------------------------------------*/

task main(){

	nMotorPIDSpeedCtrl[motorA] = mtrSpeedReg;			//Makes the NXT brick output the same proportional power as a percentage to both motors
	nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

	// 1st Straight
	nSyncedMotors = synchAC;							//Syncs the Motors A and C. A is the master and C is the slave.
	nSyncedTurnRatio = 100;								//Sets the slave C to copy the master A at 100%

	motor[motorA] = 50;									//Sets motor A to 50% power making both A an C move the robot in a straight line.
	wait1Msec(2500);									//Moves the robot forward for 2.5 seconds

	motor[motorA] = 0;									//Sets motor A to zero. This stops the robot
	wait1Msec(300);										//Stops for 0.3 of a second

	// 1st Turn
	nSyncedMotors = synchAC;
	nSyncedTurnRatio = -100;							//Makes the slave C do the opposite of the master A. This turns the robot

	motor[motorA] = 50;									//Sets motor A to 50% power making A an C move in different directions.
	wait1Msec(370);										//Turns the robot for 0.37 of a second

	motor[motorA] = 0;									//Sets motor A to zero. This stops the robot
	wait1Msec(300);										//Stops for 0.3 of a second

	// 2nd Straight
	nSyncedMotors = synchAC;
	nSyncedTurnRatio = 100;

	motor[motorA] = 50;
	wait1Msec(2300);

	motor[motorA] = 0;
	wait1Msec(300);

	if (random(2) == 2)									//Picks a random number between 1 and 2. If the number is equal to 2 then the Robot drives towards point 3
	{
		//Goes to point 3
		
		// 2nd Turn
		nSyncedMotors = synchAC;
		nSyncedTurnRatio = -100;

		motor[motorA] = 50;
		wait1Msec(360);

		motor[motorA] = 0;
		wait1Msec(300);

		// 3rd Straight
		nSyncedMotors = synchAC;
		nSyncedTurnRatio = 100;

		motor[motorA] = 50;
		wait1Msec(2500);

		motor[motorA] = 0;
		wait1Msec(300);

		// 3rd Turn
		nSyncedMotors = synchAC;
		nSyncedTurnRatio = -100;

		motor[motorA] = 50;
		wait1Msec(360);

		motor[motorA] = 0;
		wait1Msec(300);

		// 4th Straight
		nSyncedMotors = synchAC;
		nSyncedTurnRatio = 100;

		motor[motorA] = 50;
		wait1Msec(1100);

		motor[motorA] = 0;
		wait1Msec(300);

		// 4th Turn
		nSyncedMotors = synchAC;
		nSyncedTurnRatio = -100;

		motor[motorA] = 50;
		wait1Msec(360);

		motor[motorA] = 0;
		wait1Msec(300);

		// Final Stretch
		nSyncedMotors = synchAC;
		nSyncedTurnRatio = 100;

		motor[motorA] = 50;
		wait1Msec(1100);

		motor[motorA] = 0;
		wait1Msec(300);
	}

	else{												//If the number picked is not 2 then the Robot moves to point 2
		//Goes to point 2

		// 2nd Turn
		nSyncedMotors = synchCA;
		nSyncedTurnRatio = -100;

		motor[motorC] = 50;
		wait1Msec(400);

		motor[motorC] = 0;
		wait1Msec(330);

		// 3rd Straight
		nSyncedMotors = synchAC;
		nSyncedTurnRatio = 100;

		motor[motorA] = 50;
		wait1Msec(1150);

		motor[motorA] = 0;
		wait1Msec(300);

		// 3rd Turn
		nSyncedMotors = synchCA;
		nSyncedTurnRatio = -100;

		motor[motorC] = 50;
		wait1Msec(400);

		motor[motorC] = 0;
		wait1Msec(300);

		// Final Straight
		nSyncedMotors = synchAC;
		nSyncedTurnRatio = 100;

		motor[motorA] = 50;
		wait1Msec(1150);
	
	}//End of IF/ELSE

}//End of Main
