/*-------------------------------------------------------------------------------------------
Program Description:			Ues the robots sonar to move around an obstacle course
Author:					Seamus de Cleir and Dylan Crosbie
Date:					04/02/2015
-------------------------------------------------------------------------------------------*/

#pragma config(Sensor, S4,     sonarSensor,    sensorSONAR)
#pragma config(Motor,  motorA,          leftMotor,     tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,           ,             tmotorNXT, openLoop)
#pragma config(Motor,  motorC,          rightMotor,    tmotorNXT, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task main()
{
	//Declaraions
	int speed = 35; 				//Sets a variable to a random number between 1 and 35
	int count = 0;

	nxtDisplayTextLine(0, "Test %d", speed);	//Shows on the NXT display the speed the robot will travel at
	//Code Body

	while(count < 4){				//The robot must detect 4 turns before stoping. After 4 it will exit this while loop
		
		while (SensorValue(sonarSensor) > 10){		//While the sonar sensor is not within 10cm of an object the robot moves forward
			motor[leftMotor] = speed;		//The motors run at a random power causing them to move the robot forward
			motor[rightMotor] = speed;
		}//End of while

		motor[leftMotor] = 0;		//When the sonar sensor is detects an object within 10cm the motors are set to 0 stopping the robot
		motor[rightMotor] = 0;

		nMotorEncoder[motorA] = 0;	//Sets the distance calculator to zero

		while(nMotorEncoder[motorA] > -300){		//This while loop continues until the motor A has gone a -300 revolution 
			motor[motorA] = -50;			//Moves motor A at -50%, turning the robot
		}//End of while
		
		count++;		//Tells the robot it has made one turn

		nMotorEncoder[motorA] = 0;		//Resets both motors distance calculators
		nMotorEncoder[motorC] = 0;

		nMotorEncoderTarget[motorA] = 720;	//Sets the target of two turns for both motors
		nMotorEncoderTarget[motorC] = 720;

		motor[leftMotor] = speed;		//Sets the power to a random number for both motors
		motor[rightMotor] = speed;

		while(nMotorRunState[motorC] !=runStateIdle)	//Moves the robot forward the target amount specified
			{ }

		motor[leftMotor] = 0;		//Sets both motors to zero. Stopping the robot
		motor[rightMotor] = 0;

	}//End of while

}//End of main

